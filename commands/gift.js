const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const UserService = require('../utils/dbHelpers');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('gift')
        .setDescription('T·∫∑ng MƒêCoin cho th√†nh vi√™n kh√°c trong c·ªông ƒë·ªìng h·ªçc t·∫≠p')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('Th√†nh vi√™n nh·∫≠n MƒêCoin')
                .setRequired(true)
        )
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('S·ªë l∆∞·ª£ng MƒêCoin mu·ªën t·∫∑ng')
                .setRequired(true)
                .setMinValue(1)
                .setMaxValue(1000000)
        )
        .addStringOption(option =>
            option.setName('reason')
                .setDescription('L√Ω do t·∫∑ng (khuy·∫øn kh√≠ch, h·ªó tr·ª£ h·ªçc t·∫≠p, v.v.)')
                .setRequired(false)
                .setMaxLength(200)
        ),

    async execute(interaction) {
        try {
            const sender = interaction.user;
            const recipient = interaction.options.getUser('user');
            const amount = interaction.options.getInteger('amount');
            const reason = interaction.options.getString('reason');

            // Defer reply ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω
            await interaction.deferReply();

            // Validation: Kh√¥ng th·ªÉ t·ª± t·∫∑ng cho m√¨nh
            if (sender.id === recipient.id) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('üö´ Kh√¥ng Th·ªÉ Th·ª±c Hi·ªán')
                    .setDescription('B·∫°n kh√¥ng th·ªÉ t·ª± t·∫∑ng MƒêCoin cho ch√≠nh m√¨nh!')
                    .addFields({
                        name: 'üí° G·ª£i √ù',
                        value: 'H√£y t·∫∑ng cho c√°c th√†nh vi√™n kh√°c ƒë·ªÉ khuy·∫øn kh√≠ch h·ªçc t·∫≠p!',
                        inline: false
                    })
                    .setTimestamp()
                    .setFooter({ text: 'Study Community ‚Ä¢ Gift System' });

                await interaction.editReply({ embeds: [errorEmbed] });
                return;
            }

            // Validation: Kh√¥ng th·ªÉ t·∫∑ng cho bot
            if (recipient.bot) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('ü§ñ Kh√¥ng Th·ªÉ T·∫∑ng Bot')
                    .setDescription('Bot kh√¥ng c·∫ßn MƒêCoin ƒë·ªÉ ho·∫°t ƒë·ªông!')
                    .addFields({
                        name: 'üë• Thay V√†o ƒê√≥',
                        value: 'H√£y t·∫∑ng cho c√°c th√†nh vi√™n ƒëang h·ªçc t·∫≠p t√≠ch c·ª±c',
                        inline: false
                    })
                    .setTimestamp()
                    .setFooter({ text: 'Study Community ‚Ä¢ Gift System' });

                await interaction.editReply({ embeds: [errorEmbed] });
                return;
            }

            // Ki·ªÉm tra balance c·ªßa ng∆∞·ªùi g·ª≠i
            const senderBalance = await UserService.getUserBalance(sender.id);

            if (!senderBalance.exists || senderBalance.balance < amount) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('üí∏ Kh√¥ng ƒê·ªß MƒêCoin')
                    .setDescription('Balance c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y.')
                    .addFields(
                        {
                            name: 'üíé Balance Hi·ªán T·∫°i',
                            value: `**${senderBalance.balance?.toLocaleString() || 0} MƒêC**`,
                            inline: true
                        },
                        {
                            name: 'üí∞ S·ªë Ti·ªÅn C·∫ßn',
                            value: `**${amount.toLocaleString()} MƒêC**`,
                            inline: true
                        },
                        {
                            name: 'üìä C√≤n Thi·∫øu',
                            value: `**${(amount - (senderBalance.balance || 0)).toLocaleString()} MƒêC**`,
                            inline: true
                        },
                        {
                            name: 'üéì C√°ch Ki·∫øm Th√™m',
                            value: '‚Ä¢ Tham gia voice channel h·ªçc t·∫≠p\n‚Ä¢ Duy tr√¨ th·ªùi gian h·ªçc ·ªïn ƒë·ªãnh\n‚Ä¢ Nh·∫≠n gift t·ª´ th√†nh vi√™n kh√°c',
                            inline: false
                        }
                    )
                    .setTimestamp()
                    .setFooter({ text: 'Study Community ‚Ä¢ H√£y ti·∫øp t·ª•c h·ªçc t·∫≠p!' });

                await interaction.editReply({ embeds: [errorEmbed] });
                return;
            }

            // Th·ª±c hi·ªán transfer
            await UserService.transferCoins(sender.id, recipient.id, amount, reason);

            // L·∫•y balance m·ªõi c·ªßa ng∆∞·ªùi g·ª≠i ƒë·ªÉ hi·ªÉn th·ªã
            const newSenderBalance = await UserService.getUserBalance(sender.id);

            // T·∫°o embed th√¥ng b√°o th√†nh c√¥ng v·ªõi design h·ªçc t·∫≠p
            const successEmbed = new EmbedBuilder()
                .setColor('#386641') // Primary green for important transaction
                .setTitle('üéÅ Gift MƒêCoin Th√†nh C√¥ng!')
                .setDescription(`Giao d·ªãch h·ªó tr·ª£ h·ªçc t·∫≠p ƒë√£ ƒë∆∞·ª£c ho√†n t·∫•t`)
                .addFields(
                    {
                        name: 'ü§ù Th√¥ng Tin Giao D·ªãch',
                        value: `**${sender.username}** ‚Üí **${recipient.username}**\nüí∞ **${amount.toLocaleString()} MƒêC**`,
                        inline: false
                    }
                )
                .setTimestamp()
                .setFooter({ text: 'Study Community ‚Ä¢ C·∫£m ∆°n s·ª± h·ªó tr·ª£!' });

            // Add balance information in secondary layout
            successEmbed.addFields(
                {
                    name: 'üë§ Ng∆∞·ªùi T·∫∑ng',
                    value: `${sender.username}\nüíé C√≤n l·∫°i: **${newSenderBalance.balance.toLocaleString()} MƒêC**`,
                    inline: true
                },
                {
                    name: 'üéØ Ng∆∞·ªùi Nh·∫≠n',
                    value: `${recipient.username}\nüÜî ${recipient.id.slice(-4)}...`,
                    inline: true
                },
                {
                    name: 'üìà √ù Nghƒ©a',
                    value: `T∆∞∆°ng ƒë∆∞∆°ng ~${Math.floor(amount / 720)} gi·ªù h·ªçc`,
                    inline: true
                }
            );

            // Th√™m reason v·ªõi styling ph√π h·ª£p
            if (reason) {
                successEmbed.addFields({
                    name: 'üí¨ L·ªùi Nh·∫Øn Khuy·∫øn Kh√≠ch',
                    value: `"${reason}"`,
                    inline: false
                });
            }

            // Add motivational message
            successEmbed.addFields({
                name: 'üåü Tinh Th·∫ßn C·ªông ƒê·ªìng',
                value: 'C·∫£m ∆°n b·∫°n ƒë√£ h·ªó tr·ª£ v√† khuy·∫øn kh√≠ch c√°c th√†nh vi√™n h·ªçc t·∫≠p!',
                inline: false
            });

            await interaction.editReply({ embeds: [successEmbed] });

            // Log transaction
            console.log(`üéÅ Gift transaction: ${sender.username} (${sender.id}) -> ${recipient.username} (${recipient.id}): ${amount} SCP`);

        } catch (error) {
            console.error('Error in gift command:', error);

            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau.';

            if (error.message === 'Insufficient balance') {
                errorMessage = 'B·∫°n kh√¥ng c√≥ ƒë·ªß SCP ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch n√†y.';
            }

            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå L·ªói giao d·ªãch')
                .setDescription(errorMessage)
                .setTimestamp();

            if (interaction.replied || interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },
};