const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const UserService = require('../utils/prismaService');  // CHANGED: From dbHelpers to PrismaService

module.exports = {
    data: new SlashCommandBuilder()
        .setName('fund-list')
        .setDescription('Xem danh s√°ch t·∫•t c·∫£ c√°c qu·ªπ hi·ªán c√≥'),

    async execute(interaction) {
        try {
            // Defer reply ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω
            await interaction.deferReply();

            // L·∫•y danh s√°ch c√°c qu·ªπ
            const funds = await interaction.client.prismaService.getFundsList();

            if (funds.length === 0) {
                const embed = new EmbedBuilder()
                    .setColor('#6A994E')
                    .setTitle('Danh S√°ch Qu·ªπ')
                    .setDescription('Ch∆∞a c√≥ qu·ªπ n√†o ƒë∆∞·ª£c t·∫°o\n\nH√£y t·∫°o qu·ªπ ƒë·∫ßu ti√™n v·ªõi `/fund-create`')
                    .setTimestamp()
                    .setFooter({ text: 'MDHH Community ‚Ä¢ Fund System' });

                await interaction.editReply({ embeds: [embed] });
                return;
            }

            // T·∫°o embed hi·ªÉn th·ªã danh s√°ch qu·ªπ
            const embed = new EmbedBuilder()
                .setColor('#386641')
                .setTitle('üèõÔ∏è Danh S√°ch Qu·ªπ Hi·ªán C√≥')
                .setDescription(`üìä C√≥ **${funds.length}** qu·ªπ ƒëang ho·∫°t ƒë·ªông\n\u2000`) // Th√™m kho·∫£ng tr·∫Øng
                .setTimestamp()
                .setFooter({ text: 'MDHH Community ‚Ä¢ Fund System' });

            // Th√™m th√¥ng tin t·ª´ng qu·ªπ v·ªõi layout user-centric
            for (let i = 0; i < Math.min(funds.length, 8); i++) {
                const fund = funds[i];
                const totalValue = (fund.total_donated || 0) + (fund.total_donated_vip || 0);
                const createdDate = new Date(fund.created_at).toLocaleDateString('vi-VN');
                const isLast = i === Math.min(funds.length, 8) - 1;

                // T·∫°o separator line
                const separator = isLast ? '' : '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';

                embed.addFields({
                    name: `${i + 1}. ${fund.name}`,
                    value: `> *${fund.description}*\n\n` +
                           `üíµ **${(fund.total_donated || 0).toLocaleString()}** MƒêCoin\n` +
                           `üí¥ **${(fund.total_donated_vip || 0).toLocaleString()}** MƒêV\n` +
                           `üìÖ Ng√†y t·∫°o: **${createdDate}**\n\n` +
                           `üîó Quy√™n g√≥p: \`/donate fund:${fund.name}\`\n` +
                           `üìä Chi ti·∫øt: \`/fund fund_name:${fund.name}\`` +
                           separator,
                    inline: false
                });
            }

            // Th√™m h∆∞·ªõng d·∫´n n·∫øu c√≥ nhi·ªÅu h∆°n 8 qu·ªπ
            if (funds.length > 8) {
                embed.addFields({
                    name: 'L∆∞u √ù',
                    value: `Hi·ªÉn th·ªã 8/${funds.length} qu·ªπ g·∫ßn nh·∫•t\n\u2000`,
                    inline: false
                });
            }

            // Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v·ªõi layout ƒë·∫πp h∆°n
            embed.addFields({
                name: 'H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng',
                value: '`/donate` - Quy√™n g√≥p cho qu·ªπ\n' +
                       '`/fund fund_name:t√™n_qu·ªπ` - Xem b·∫£ng x·∫øp h·∫°ng\n' +
                       '`/fund-create` - T·∫°o qu·ªπ m·ªõi',
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Error in fund-list command:', error);

            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('L·ªói')
                .setDescription('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch qu·ªπ. Vui l√≤ng th·ª≠ l·∫°i sau.')
                .setTimestamp()
                .setFooter({ text: 'MDHH Community ‚Ä¢ Fund System' });

            if (interaction.replied || interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
            }
        }
    },
};
