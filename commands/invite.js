const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, MessageFlags } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('invite')
        .setDescription('L·∫•y link m·ªùi ƒë·ªÉ nh·∫≠n 3 MƒêCoin cho m·ªói ng∆∞·ªùi tham gia'),
                
    async execute(interaction) {
        try {
            // Check if user can create invites
            if (!interaction.member.permissions.has(PermissionFlagsBits.CreateInstantInvite)) {
                return await interaction.reply({
                    content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o link m·ªùi!',
                    flags: MessageFlags.Ephemeral
                });
            }

            // Fixed settings: 7 days, unlimited uses
            const maxUses = 0; // 0 = unlimited
            const maxAge = 7 * 24 * 60 * 60; // 7 days in seconds

            // Get a suitable channel to create invite from
            const targetChannel = interaction.guild.systemChannel || 
                                 interaction.guild.channels.cache.find(c => 
                                     c.type === 0 && // Text channel
                                     c.permissionsFor(interaction.guild.members.me)
                                        .has(PermissionFlagsBits.CreateInstantInvite)
                                 ) ||
                                 interaction.channel;

            if (!targetChannel) {
                return await interaction.reply({
                    content: '‚ùå Kh√¥ng t√¨m th·∫•y channel ph√π h·ª£p ƒë·ªÉ t·∫°o invite!',
                    flags: MessageFlags.Ephemeral
                });
            }

            await interaction.deferReply({ flags: MessageFlags.Ephemeral });

            // Create the invite
            const invite = await targetChannel.createInvite({
                maxAge: maxAge,
                maxUses: maxUses,
                unique: true, // Create a unique invite even if one with same settings exists
                reason: `Invite created by ${interaction.user.tag} for referral rewards`
            });

            // Create embed with invite info
            const embed = new EmbedBuilder()
                .setColor(0x00ff00)
                .setTitle('üîó Link M·ªùi C·ªßa B·∫°n')
                .setDescription(
                    `**${invite.url}**\n\n` +
                    `üéØ **C√°ch s·ª≠ d·ª•ng:**\n` +
                    `1. Copy link tr√™n\n` +
                    `2. Share v·ªõi b·∫°n b√®\n` +
                    `3. Nh·∫≠n **3 MƒêCoin** m·ªói ng∆∞·ªùi join! üíé\n\n`
                )
                .addFields(
                    { name: 'üí´ Code', value: `\`${invite.code}\``, inline: true },
                    { name: '‚è∞ H·∫øt h·∫°n', value: `<t:${Math.floor(invite.expiresAt.getTime() / 1000)}:R>`, inline: true },
                    { name: 'üéÅ Ph·∫ßn th∆∞·ªüng', value: '**3 MƒêCoin** m·ªói invite', inline: true }
                )
                .setFooter({ 
                    text: `Link c·ªßa ${interaction.user.tag} ‚Ä¢ Kh√¥ng gi·ªõi h·∫°n l∆∞·ª£t d√πng ‚Ä¢ 7 ng√†y`, 
                    iconURL: interaction.user.displayAvatarURL() 
                })
                .setTimestamp();

            await interaction.editReply({ embeds: [embed] });

            // L∆∞u th√¥ng tin user th·ª±c t·∫ø v√†o database (override bot inviter)
            try {
                const { pool } = require('../db/database');
                await pool.query(`
                    INSERT INTO invites (code, inviter_id, uses, max_uses, expires_at, created_at, updated_at)
                    VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP)
                    ON CONFLICT (code) DO UPDATE SET
                        inviter_id = $2,
                        uses = $3,
                        max_uses = $4,
                        expires_at = $5,
                        updated_at = CURRENT_TIMESTAMP
                `, [
                    invite.code,
                    interaction.user.id, // User th·ª±c t·∫ø, kh√¥ng ph·∫£i bot
                    invite.uses || 0,
                    invite.maxUses || 0,
                    invite.expiresAt,
                    invite.createdAt
                ]);
                
                console.log(`üìù Saved invite ${invite.code} with real inviter: ${interaction.user.tag}`);
            } catch (dbError) {
                console.error('‚ùå Error saving invite to database:', dbError);
            }

            console.log(`‚úÖ ${interaction.user.tag} created invite: ${invite.code} (7 days, unlimited uses)`);

        } catch (error) {
            console.error('‚ùå Error creating invite:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor(0xff0000)
                .setTitle('‚ùå L·ªói T·∫°o Link M·ªùi')
                .setDescription(
                    'Kh√¥ng th·ªÉ t·∫°o link m·ªùi. C√≥ th·ªÉ do:\n' +
                    '‚Ä¢ Bot kh√¥ng c√≥ quy·ªÅn t·∫°o invite\n' +
                    '‚Ä¢ Server ƒë√£ ƒë·∫°t gi·ªõi h·∫°n invite\n' +
                    '‚Ä¢ L·ªói k·∫øt n·ªëi Discord API'
                )
                .setFooter({ text: 'Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin' });

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
            }
        }
    }
};
