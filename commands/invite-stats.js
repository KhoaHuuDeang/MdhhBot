const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const PrismaService = require('../utils/prismaService');  // UNIFIED: All functions in one service

module.exports = {
    data: new SlashCommandBuilder()
        .setName('invite-stats')
        .setDescription('Xem th·ªëng k√™ invite v√† ph·∫ßn th∆∞·ªüng c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('Ng∆∞·ªùi d√πng c·∫ßn xem th·ªëng k√™ (m·∫∑c ƒë·ªãnh l√† b·∫°n)')
                .setRequired(false)),
                
    async execute(interaction) {
        try {
            const targetUser = interaction.options.getUser('user') || interaction.user;
            const isOwnStats = targetUser.id === interaction.user.id;
            
            // L·∫•y member objects ƒë·ªÉ c√≥ displayName
            let targetMember;
            if (isOwnStats) {
                targetMember = interaction.member;
            } else {
                targetMember = await interaction.guild.members.fetch(targetUser.id).catch(() => null);
            }
            
            const targetDisplayName = targetMember?.displayName || targetUser.username;
            const currentUserDisplayName = interaction.member?.displayName || interaction.user.username;
            
            await interaction.deferReply({ flags: isOwnStats ? MessageFlags.Ephemeral : undefined });

            // Get invite manager instance (we'll need to access it from the client)
            const inviteManager = interaction.client.inviteManager;
            
            if (!inviteManager || !inviteManager.isInitialized()) {
                return await interaction.editReply({
                    content: '‚ùå H·ªá th·ªëng invite ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng th·ª≠ l·∫°i sau!',
                });
            }

            // Get invite statistics - now from unified PrismaService
            const stats = await interaction.client.prismaService.getUserInviteStats(targetUser.id);
            
            // Create embed
            const embed = new EmbedBuilder()
                .setColor(isOwnStats ? 0x00ff00 : 0x3498db)
                .setTitle(`üìä Th·ªëng K√™ Invite${isOwnStats ? '' : ` - ${targetDisplayName}`}`)
                .setThumbnail(targetUser.displayAvatarURL())
                .addFields(
                    { 
                        name: 'T·ªïng L·ªùi M·ªùi Th√†nh C√¥ng', 
                        value: `**${stats.totalInvites}** ng∆∞·ªùi`, 
                        inline: true 
                    },
                    { 
                        name: 'T·ªïng MƒêCoin Nh·∫≠n ƒê∆∞·ª£c', 
                        value: `**${stats.totalRewards}** MƒêCoin`, 
                        inline: true 
                    },
                    { 
                        name: 'Hi·ªáu Su·∫•t', 
                        value: `**${stats.totalInvites * 3}** MƒêC potential\n**${stats.totalRewards}** MƒêC earned`, 
                        inline: true 
                    }
                )
                .setFooter({ 
                    text: isOwnStats ? 'S·ª≠ d·ª•ng /invite ƒë·ªÉ t·∫°o link m·ªùi m·ªõi!' : `Requested by ${currentUserDisplayName}`,
                    iconURL: interaction.user.displayAvatarURL()
                })
                .setTimestamp();

            // Add active invites section if user has any
            if (stats.activeInvites.length > 0) {
                const activeInvitesText = stats.activeInvites
                    .slice(0, 5) // Show max 5 most recent
                    .map(invite => {
                        const expiresText = invite.expires_at 
                            ? `<t:${Math.floor(new Date(invite.expires_at).getTime() / 1000)}:R>`
                            : 'Kh√¥ng bao gi·ªù';
                        const usesText = invite.max_uses > 0 
                            ? `${invite.uses}/${invite.max_uses}`
                            : `${invite.uses}/‚àû`;
                        
                        return `\`${invite.code}\` - ${usesText} uses - Expires ${expiresText}`;
                    })
                    .join('\n');

                embed.addFields({
                    name: `üîó Invite Links ƒêang Ho·∫°t ƒê·ªông (${stats.activeInvites.length})`,
                    value: activeInvitesText || 'Kh√¥ng c√≥ invite n√†o ƒëang ho·∫°t ƒë·ªông',
                    inline: false
                });

                if (stats.activeInvites.length > 5) {
                    embed.setFooter({ 
                        text: `${embed.data.footer.text} ‚Ä¢ Showing 5/${stats.activeInvites.length} invites` 
                    });
                }
            }

            // Add tips for improvement if stats are low
            if (isOwnStats && stats.totalInvites < 5) {
                embed.addFields({
                    name: 'üí° M·∫πo TƒÉng Invite',
                    value: 
                        '‚Ä¢ Chia s·∫ª link tr√™n m·∫°ng x√£ h·ªôi\n' +
                        '‚Ä¢ M·ªùi b·∫°n b√® trong l·ªõp h·ªçc\n' +
                        '‚Ä¢ Tham gia group h·ªçc t·∫≠p\n' +
                        '‚Ä¢ T·∫°o invite v·ªõi th·ªùi h·∫°n d√†i h∆°n',
                    inline: false
                });
            }

            // Show ranking if stats are good
            if (stats.totalInvites > 0) {
                try {
                    const leaderboard = await inviteManager.getInviteLeaderboard(100);
                    const userRank = leaderboard.findIndex(entry => entry.inviter_id === targetUser.id) + 1;
                    
                    if (userRank > 0) {
                        embed.addFields({
                            name: 'üèÜ Th·ª© H·∫°ng',
                            value: `**#${userRank}** trong top inviter`,
                            inline: true
                        });
                    }
                } catch (error) {
                    console.error('Error getting invite ranking:', error);
                }
            }

            await interaction.editReply({ embeds: [embed] });

            console.log(`‚úÖ ${currentUserDisplayName} checked invite stats for ${targetDisplayName}: ${stats.totalInvites} invites, ${stats.totalRewards} rewards`);

        } catch (error) {
            console.error('‚ùå Error getting invite stats:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor(0xff0000)
                .setTitle('‚ùå L·ªói L·∫•y Th·ªëng K√™')
                .setDescription('Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ invite. Vui l√≤ng th·ª≠ l·∫°i sau!')
                .setFooter({ text: 'N·∫øu l·ªói ti·∫øp t·ª•c x·∫£y ra, h√£y li√™n h·ªá admin' });

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
            }
        }
    }
};
