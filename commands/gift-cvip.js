const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const UserService = require('../utils/prismaService');  // CHANGED: From dbHelpers to PrismaService

module.exports = {
    data: new SlashCommandBuilder()
        .setName('gift-cvip')
        .setDescription('T·∫∑ng MƒêV (VIP coins) cho th√†nh vi√™n kh√°c')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('Ng∆∞·ªùi nh·∫≠n MƒêV')
                .setRequired(true)
        )
        .addIntegerOption(option =>
            option.setName('amount')
                .setDescription('S·ªë MƒêV mu·ªën t·∫∑ng')
                .setRequired(true)
                .setMinValue(1)
        )
        .addStringOption(option =>
            option.setName('reason')
                .setDescription('L√Ω do t·∫∑ng (t√πy ch·ªçn)')
                .setRequired(false)
                .setMaxLength(200)
        ),

    async execute(interaction) {
        try {
            const sender = interaction.user;
            const receiver = interaction.options.getUser('user');
            const amount = interaction.options.getInteger('amount');
            const reason = interaction.options.getString('reason')?.trim() || null;

            // Defer reply ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω
            await interaction.deferReply();

            // Kh√¥ng cho ph√©p t·ª± t·∫∑ng
            if (sender.id === receiver.id) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('‚ùå Kh√¥ng Th·ªÉ T·ª± T·∫∑ng')
                    .setDescription('B·∫°n kh√¥ng th·ªÉ t·∫∑ng MƒêV cho ch√≠nh m√¨nh!')
                    .setTimestamp()
                    .setFooter({ text: 'MDHH Community ‚Ä¢ VIP Gift System' });

                await interaction.editReply({ embeds: [errorEmbed] });
                return;
            }

            // Kh√¥ng cho ph√©p t·∫∑ng cho bot
            if (receiver.bot) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('‚ùå Kh√¥ng Th·ªÉ T·∫∑ng Bot')
                    .setDescription('B·∫°n kh√¥ng th·ªÉ t·∫∑ng MƒêV cho bot!')
                    .setTimestamp()
                    .setFooter({ text: 'MDHH Community ‚Ä¢ VIP Gift System' });

                await interaction.editReply({ embeds: [errorEmbed] });
                return;
            }

            // L·∫•y th√¥ng tin balance c·ªßa ng∆∞·ªùi g·ª≠i
            const senderBalance = await interaction.client.prismaService.getUserBalance(sender.id);
            if (!senderBalance.exists || senderBalance.balance_vip < amount) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF6B6B')
                    .setTitle('‚ùå Kh√¥ng ƒê·ªß MƒêV')
                    .setDescription(
                        `B·∫°n ch·ªâ c√≥ **${senderBalance.balance_vip || 0} MƒêV** nh∆∞ng mu·ªën t·∫∑ng **${amount} MƒêV**.`
                    )
                    .setTimestamp()
                    .setFooter({ text: 'MDHH Community ‚Ä¢ VIP Gift System' });

                await interaction.editReply({ embeds: [errorEmbed] });
                return;
            }

            // L·∫•y display names
            const senderDisplayName = interaction.member?.displayName || sender.username;
            let receiverDisplayName = receiver.username;
            try {
                const receiverMember = await interaction.guild.members.fetch(receiver.id).catch(() => null);
                receiverDisplayName = receiverMember?.displayName || receiver.username;
            } catch (error) {
                // S·ª≠ d·ª•ng username n·∫øu kh√¥ng fetch ƒë∆∞·ª£c member
            }

            // Th·ª±c hi·ªán transfer VIP coins
            await interaction.client.prismaService.transferVipCoins(sender.id, receiver.id, amount, reason);

            // T·∫°o embed th√†nh c√¥ng
            const embed = new EmbedBuilder()
                .setColor('#6A994E')
                .setTitle('üí¥ VIP Gift Th√†nh C√¥ng!')
                .setDescription(`**${senderDisplayName}** ƒë√£ t·∫∑ng **${amount.toLocaleString()} MƒêV** cho **${receiverDisplayName}**!`)
                .addFields(
                    {
                        name: 'üéÅ Ng∆∞·ªùi T·∫∑ng',
                        value: `${sender}`,
                        inline: true
                    },
                    {
                        name: 'üéØ Ng∆∞·ªùi Nh·∫≠n',
                        value: `${receiver}`,
                        inline: true
                    },
                    {
                        name: 'üí¥ S·ªë Ti·ªÅn',
                        value: `**${amount.toLocaleString()} MƒêV**`,
                        inline: true
                    }
                )
                .setThumbnail(sender.displayAvatarURL())
                .setTimestamp()
                .setFooter({ text: 'MDHH Community ‚Ä¢ C·∫£m ∆°n s·ª± h√†o ph√≥ng!' });

            // Th√™m l√Ω do n·∫øu c√≥
            if (reason) {
                embed.addFields({
                    name: 'üí≠ L·ªùi Nh·∫Øn',
                    value: reason,
                    inline: false
                });
            }

            // Th√™m balance c√≤n l·∫°i c·ªßa ng∆∞·ªùi g·ª≠i
            const remainingVip = (senderBalance.balance_vip || 0) - amount;
            embed.addFields({
                name: 'üí¥ MƒêVIP C√≤n L·∫°i',
                value: `**${remainingVip.toLocaleString()} MƒêV**`,
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

            // G·ª≠i DM cho ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥ th·ªÉ)
            try {
                const dmEmbed = new EmbedBuilder()
                    .setColor('#6A994E')
                    .setTitle('üí¥ B·∫°n Nh·∫≠n ƒê∆∞·ª£c VIP Gift!')
                    .setDescription(`**${senderDisplayName}** ƒë√£ t·∫∑ng b·∫°n **${amount.toLocaleString()} MƒêV**!`)
                    .addFields({
                        name: 'üí≠ L·ªùi Nh·∫Øn',
                        value: reason || 'Kh√¥ng c√≥ l·ªùi nh·∫Øn',
                        inline: false
                    })
                    .setTimestamp()
                    .setFooter({ text: 'MDHH Community ‚Ä¢ VIP Gift System' });

                await receiver.send({ embeds: [dmEmbed] });
            } catch (error) {
                // Kh√¥ng g·ª≠i ƒë∆∞·ª£c DM, kh√¥ng sao
                console.log(`Could not send DM to ${receiver.tag}`);
            }

        } catch (error) {
            console.error('Error in gift-cvip command:', error);

            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi t·∫∑ng MƒêV. Vui l√≤ng th·ª≠ l·∫°i sau.';

            if (error.message === 'Insufficient VIP balance') {
                errorMessage = 'B·∫°n kh√¥ng ƒë·ªß MƒêV ƒë·ªÉ t·∫∑ng!';
            }

            const errorEmbed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('‚ùå L·ªói VIP Gift')
                .setDescription(errorMessage)
                .setTimestamp()
                .setFooter({ text: 'MDHH Community ‚Ä¢ VIP Gift System' });

            if (interaction.replied || interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], flags: MessageFlags.Ephemeral });
            }
        }
    },
};
