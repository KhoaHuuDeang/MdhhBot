require('dotenv').config(); // Load bi·∫øn m√¥i tr∆∞·ªùng
const { Client, GatewayIntentBits, Collection, Events } = require('discord.js'); // Import Discord.js

const fs = require('node:fs');
const path = require('node:path');

const countDown = require('./utils/countDown');

const { initializeDatabase } = require('./db/database');
const { getUserBalance } = require('./utils/dbHelpers');
const UserService = require('./utils/dbHelpers');


// T·∫°o client Discord v·ªõi intents c·∫ßn thi·∫øt
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,                // Info server
        GatewayIntentBits.GuildMembers,          // S·ª± ki·ªán th√†nh vi√™n
        GatewayIntentBits.GuildVoiceStates,      // S·ª± ki·ªán voice
        GatewayIntentBits.GuildMessages,         // ƒê·ªçc tin nh·∫Øn
        GatewayIntentBits.MessageContent         // ƒê·ªçc n·ªôi dung tin nh·∫Øn
    ]
});

// T·∫°o collection ƒë·ªÉ l∆∞u commands
client.commands = new Collection();

// Load command files
const commandsPath = path.join(__dirname, 'commands');
try {
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        const filePath = path.join(commandsPath, file);
        const command = require(filePath);

        if ('data' in command && 'execute' in command) {
            client.commands.set(command.data.name, command);
            console.log(`‚úÖ Loaded command: ${command.data.name}`);
        } else {
            console.log(`‚ö†Ô∏è Command at ${filePath} is missing "data" or "execute" property.`);
        }
    }
} catch (error) {
    console.error('‚ùå Error loading commands:', error);
}

// Khi bot ƒë√£ s·∫µn s√†ng
client.once('clientReady', async () => {
    console.log('üöÄ Bot is online!'); // Log tr·∫°ng th√°i bot
    let user = client.users.cache.size // S·ªë user ƒë√£ cache
    console.log('Bot serve for ', user, ' users ')

    // Initialize database
    try {
        await initializeDatabase();
        console.log('‚úÖ Database initialized successfully');
    } catch (error) {
        console.error('‚ùå Failed to initialize database:', error);
        process.exit(1);
    }

    // Set tr·∫°ng th√°i bot
    // client.user.setActivity('ƒêang n·∫•u con bot', { type: 0 }) // Old status
    client.user.setActivity('V√†o voicechat h·ªçc ƒëi m·∫•y c·∫≠u ∆°i', { type: 0 })

    // X√°c nh·∫≠n guild
    const guild = client.guilds.cache.get(process.env.DISCORD_GUILD_ID)
    if (guild) {
        console.log(`‚úÖ Bot is on  ${guild.name}`);
        console.log(`üìà Guild has ${guild.memberCount} members`);
    } else {
        console.log('look like guild id not exists, please check again')
    }

    //kh·ªüi t·∫°o map, l∆∞u th√¥ng tin user 
    const channelSession = new Map()

    // L·∫Øng nghe s·ª± ki·ªán voice
    client.on('voiceStateUpdate', async (lastTime, thisTime) => {
        // ...existing code...
        // L·∫•y user trong discord
        const user = thisTime.member.user

        // c√≥ trong discord l√† 1 chuy·ªán, database l√† 1 chuy·ªán 
        UserService.getOrCreateUser(user.id)

        if (!user) return;
        if (user.bot) return; // B·ªè qua bot

        // c√≥ user trong database th√¨ m·ªõi check ƒë∆∞·ª£c 
        let balance = await getUserBalance(user.id)

        // User join voice (standard) -  
        if (thisTime.channelId && (!lastTime.channelId || lastTime.channelId === '1357199605955039363')) {
            //l·∫•y ra channel user join hi·ªán t·∫°i
            let currentChannel = thisTime.channel

            // X√≥a interval ƒë·ªÉ cleanup tr√°nh g·ªçi infinite khi user out 
            // mu·ªën x√≥a interval th√¨ ph·∫£i c√≥ timmer, gi·ªØ n√≥ l·∫°i truy·ªÅn v√†o channelSession
            const timmer = countDown(user.id) // New version with database integration

            let minutesLeft = 60;
            let countdownMessage = null
            let coin = 0;
            countdownMessage = await currentChannel.send(`<a:a_g_Cheer:1301431655503892531> Xinn ch√†o b·∫°n h·ªçc ${thisTime.member.displayName}! T·ª´ b√¢y gi·ªù n·∫øu b·∫°n tham gia VC, m·ªói 1 ti·∫øng h·ªçc s·∫Ω quy ƒë·ªïi ra th√†nh m·ªôt 1Mƒê Coin Yay ! \n B·∫°n c√≤n **${minutesLeft}** ph√∫t ƒë·ªÉ nh·∫≠n th∆∞·ªüng ! \n trong phi√™n h·ªçc n√†y b·∫°n ƒë√£ ki·∫øm ƒë∆∞·ª£c ${coin} MƒêCoin!`);
            const countdownTimer = setInterval(async () => {
                minutesLeft--
                await countdownMessage.edit(`<a:a_g_Cheer:1301431655503892531> Xin ch√†o b·∫°n h·ªçc ${thisTime.member.displayName}! T·ª´ b√¢y gi·ªù n·∫øu b·∫°n tham gia VC, m·ªói 1 ti·∫øng h·ªçc s·∫Ω quy ƒë·ªïi ra th√†nh m·ªôt 1Mƒê Coin Yay ! \n B·∫°n c√≤n **${minutesLeft}** ph√∫t ƒë·ªÉ nh·∫≠n th∆∞·ªüng ! \n trong phi√™n h·ªçc n√†y b·∫°n ƒë√£ ki·∫øm ƒë∆∞·ª£c ${coin} MƒêCoin!`);

                if (minutesLeft === 0) {
                    coin++
                    await currentChannel.send(`<a:a_b_gojotwerk:1288783436718411776> ${thisTime.member.displayName} +1 MƒêCoin!`);
                    minutesLeft = 60; // Reset ƒë·ªÉ ƒë·∫øm ti·∫øp
                }
            }, 60 * 1000);

            channelSession.set(user.id, { currentChannel, timmer, balance, countdownTimer })
        }

        // User r·ªùi voice
        if (lastTime.channelId && !thisTime.channelId) {
            const data = channelSession.get(user.id);
            if (data) {
                clearInterval(data.countdownTimer); // stop UI countdown
                clearInterval(data.timmer);         // stop DB update
                channelSession.delete(user.id);
                console.log(`Cleanup intervals for ${user.id}`);
            }
        }


        // // X√°c ƒë·ªãnh user b·∫•m v√†o s·ª± ki·ªán t·∫°o ph√≤ng v·ªõi id ƒë∆∞·ª£c quy ∆∞·ªõc nh∆∞ d∆∞·ªõi 
        // if (lastTime.channel && lastTime.channel.id === '1357199605955039363') {
        //     let currentChannel = thisTime.channel
        //     let currentChannelVoice = thisTime.channel

        //     // Stop old session
        //     const oldSession = channelSession.get(user.id);
        //     if (oldSession) {
        //         clearInterval(oldSession.timmer);
        //     }

        //     // Start new session
        //     const timmer = countDown(user.id)

        //     currentChannelVoice.send(`${user.tag} chuy·ªÉn t·ª´ **${lastChannelVoice.name}** sang **${currentChannelVoice.name}** - ti·∫øp t·ª•c ki·∫øm MƒêCoin! üéØ`);
        //     channelSession.set(user.id, { currentChannel: currentChannelVoice, timmer, balance })
    })
})

// X·ª≠ l√Ω s·ª± ki·ªán slash command
client.on(Events.InteractionCreate, async interaction => {
    // Ch·ªâ x·ª≠ l√Ω l·ªánh chat input
    if (!interaction.isChatInputCommand()) return;

    // L·∫•y command t·ª´ collection
    const command = client.commands.get(interaction.commandName)

    // N·∫øu kh√¥ng t√¨m th·∫•y command, log l·ªói
    if (!command) {
        // c·∫ßn x·ª≠ yls ch·ªó n√†y 
        console.error(`No command matching ${interaction.commandName} was found.`);
        return;
    }

    try {
        // Th·ª±c thi l·ªánh
        await command.execute(interaction);
        console.log(`‚úÖ Command ${interaction.commandName} executed by ${interaction.user.username}`);
    } catch (error) {
        // N·∫øu l·ªói, log v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói cho user
        console.error(`‚ùå Error executing command ${interaction.commandName}:`, error);

        const errorMessage = {
            content: 'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán command n√†y!',
            ephemeral: true
        };

        // N·∫øu ƒë√£ reply ho·∫∑c defer, edit l·∫°i reply
        if (interaction.replied || interaction.deferred) {
            await interaction.editReply(errorMessage);
        } else {
            await interaction.reply(errorMessage);
        }
    }
});

// ƒêƒÉng nh·∫≠p bot
client.login(process.env.DISCORD_TOKEN)