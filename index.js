require('dotenv').config(); // Load bi·∫øn m√¥i tr∆∞·ªùng
const { Client, GatewayIntentBits, Collection, Events, MessageFlags } = require('discord.js'); // Import Discord.js
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, VoiceConnectionStatus } = require('@discordjs/voice');
const ffmpegPath = require('ffmpeg-static');

const fs = require('node:fs');
const path = require('node:path');

const countDown = require('./utils/countDown');
const PrismaService = require('./utils/prismaService');  // UNIFIED: All functions in one service


// T·∫°o client Discord v·ªõi intents c·∫ßn thi·∫øt
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,                // Info server
        GatewayIntentBits.GuildMembers,          // S·ª± ki·ªán th√†nh vi√™n
        GatewayIntentBits.GuildVoiceStates,      // S·ª± ki·ªán voice
        GatewayIntentBits.GuildMessages,         // ƒê·ªçc tin nh·∫Øn
        GatewayIntentBits.MessageContent,        // ƒê·ªçc n·ªôi dung tin nh·∫Øn
        GatewayIntentBits.GuildInvites           // Theo d√µi invite (NEW)
    ]
});

// T·∫°o collection ƒë·ªÉ l∆∞u commands
client.commands = new Collection();

// Initialize InviteManager - now part of PrismaService
// PrismaService is exported as singleton instance
const prismaService = PrismaService;
client.prismaService = prismaService;

// Load command files
const commandsPath = path.join(__dirname, 'commands');
try {
    const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        const filePath = path.join(commandsPath, file);
        const command = require(filePath);

        if ('data' in command && 'execute' in command) {
            client.commands.set(command.data.name, command);
            console.log(`‚úÖ Loaded command: ${command.data.name}`);
        } else {
            console.log(`‚ö†Ô∏è Command at ${filePath} is missing "data" or "execute" property.`);
        }
    }
} catch (error) {
    console.error('‚ùå Error loading commands:', error);
}

// Khi bot ƒë√£ s·∫µn s√†ng
client.once('clientReady', async () => {
    console.log('üöÄ Bot is online!'); // Log tr·∫°ng th√°i bot
    let user = client.users.cache.size // S·ªë user ƒë√£ cache
    console.log('Bot serve for ', user, ' users ')

    // Prisma handles database connection automatically
    console.log('‚úÖ Database connection managed by Prisma ORM');

    // Set tr·∫°ng th√°i bot
    // client.user.setActivity('ƒêang n·∫•u con bot', { type: 0 }) // Old status
    client.user.setActivity('V√†o voicechat h·ªçc ƒëi m·∫•y c·∫≠u ∆°i', { type: 0 })

    // X√°c nh·∫≠n guild
    const guild = client.guilds.cache.get(process.env.DISCORD_GUILD_ID)
    if (guild) {
        console.log(`‚úÖ Bot is on  ${guild.name}`);
        console.log(`üìà Guild has ${guild.memberCount} members`);

        // Initialize invite manager - now part of PrismaService
        try {
            await prismaService.initializeInviteCache(guild, client);
            console.log('‚úÖ Invite manager initialized successfully');
        } catch (error) {
            console.error('‚ùå Failed to initialize invite manager:', error);
        }
    } else {
        console.log('look like guild id not exists, please check again')
    }

    //kh·ªüi t·∫°o map, l∆∞u th√¥ng tin user 
    const channelSession = new Map()

    // Event handler for new members (INVITE TRACKING)
    client.on('guildMemberAdd', async (member) => {
        console.log(`üëã New member joined: ${member.user.tag}`);

        // Skip bots
        if (member.user.bot) return;

        try {
            // Ensure new user exists in database
            await prismaService.getOrCreateUser(member.user.id);

            // Find which invite was used - now in PrismaService
            const usedInvite = await prismaService.findUsedInvite(member.guild);

            if (usedInvite && usedInvite.inviter) {
                // Don't reward self-invites
                if (usedInvite.inviter.id === member.user.id) {
                    console.log(`üö´ Self-invite detected for ${member.user.tag}, no reward given`);
                    return;
                }

                // Don't reward bot invites
                if (usedInvite.inviter.bot) {
                    console.log(`üö´ Bot invite detected (${usedInvite.inviter.tag}), no reward given`);
                    return;
                }

                // Reward the inviter - now in PrismaService
                await prismaService.rewardInviter(
                    usedInvite.inviter,
                    member,
                    usedInvite.code,
                    3 // 3 MƒêCoin reward
                );

                // Send welcome message with inviter mention
                const welcomeChannel = member.guild.channels.cache.get('1420345924751855719');

                if (welcomeChannel) {
                    await welcomeChannel.send(
                        `Ch√†o m·ª´ng ${member} ƒë·∫øn v·ªõi ${member.guild.name}!\n` +
                        `ƒê∆∞·ª£c m·ªùi b·ªüi: ${usedInvite.inviter} (+3 MƒêCoin) YAY !!! \n` +
                        `Invite code: \`${usedInvite.code}\``
                    );
                }

                // Send private notification to inviter
                try {
                    await usedInvite.inviter.send(
                        `**Ch√∫c m·ª´ng!** B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c **3 MƒêCoin** v√¨ ƒë√£ m·ªùi ${member.user.tag} tham gia server!\n` +
                        `Invite code: \`${usedInvite.code}\``
                    );
                } catch (error) {
                    console.log(`üì© Could not send DM to ${usedInvite.inviter.tag}:`, error.message);
                }

            } else {
                console.log(`‚ùì Could not determine invite used by ${member.user.tag}`);

                // Send generic welcome message
                const welcomeChannel = member.guild.systemChannel ||
                    member.guild.channels.cache.find(c => c.name.includes('welcome') || c.name.includes('general'));

                if (welcomeChannel) {
                    await welcomeChannel.send(
                        `üéâ Ch√†o m·ª´ng ${member} ƒë·∫øn v·ªõi ${member.guild.name}!`
                    );
                }
            }

        } catch (error) {
            console.error('‚ùå Error processing member join for invite tracking:', error);
        }
    });

    //kh·ªüi t·∫°o map, l∆∞u th√¥ng tin user

    // Helper function to play audio file in voice channel
    async function playAudio(channel, audioFile) {
        try {
            // Check if user is in voice channel
            const voiceChannel = channel;
            if (!voiceChannel || voiceChannel.type !== 2) { // 2 = GUILD_VOICE
                console.log(`Cannot play audio: ${channel.name} is not a voice channel`);
                return;
            }

            // Join voice channel
            const connection = joinVoiceChannel({
                channelId: voiceChannel.id,
                guildId: voiceChannel.guild.id,
                adapterCreator: voiceChannel.guild.voiceAdapterCreator,
            });

            // Wait for connection to be ready
            connection.on(VoiceConnectionStatus.Ready, () => {
                console.log(`Voice connection ready in ${voiceChannel.name}`);
            });

            // Create audio player and resource
            const player = createAudioPlayer();
            const audioPath = path.join(__dirname, audioFile);

            if (!fs.existsSync(audioPath)) {
                console.error(`Audio file not found: ${audioPath}`);
                await channel.send(`File √¢m thanh kh√¥ng t·ªìn t·∫°i: ${audioFile}`);
                return;
            }

            // Use ffmpeg-static for audio processing
            const resource = createAudioResource(audioPath, {
                metadata: {
                    title: audioFile,
                }
            });

            // Play audio
            player.play(resource);
            connection.subscribe(player);
            console.log(`Playing audio: ${audioFile} in ${voiceChannel.name}`);

            // Auto-disconnect after audio finishes
            player.on(AudioPlayerStatus.Idle, () => {
                connection.destroy();
                console.log(`Audio finished, disconnected from ${voiceChannel.name}`);
            });

            // Handle errors
            player.on('error', error => {
                console.error(`Audio player error:`, error);
                connection.destroy();
            });

        } catch (error) {
            console.error(`Failed to play audio ${audioFile}:`, error);
            await channel.send(`L·ªói khi ph√°t √¢m thanh: ${error.message}`);
        }
    }

    // L·∫Øng nghe s·ª± ki·ªán voice
    client.on('voiceStateUpdate', async (lastTime, thisTime) => {
        console.log(`Voice state updated: ${lastTime.channelId} -> ${thisTime.channelId}`);
        // ...existing code...
        // L·∫•y user trong discord
        const user = thisTime.member.user

        // c√≥ trong discord l√† 1 chuy·ªán, database l√† 1 chuy·ªán 
        prismaService.getOrCreateUser(user.id)

        if (!user) return;
        if (user.bot) return; // B·ªè qua bot

        // c√≥ user trong database th√¨ m·ªõi check ƒë∆∞·ª£c 
        let balance = await prismaService.getUserBalance(user.id)

        // ‚úÖ GLOBAL CLEANUP FIRST - ƒë·∫£m b·∫£o kh√¥ng c√≥ timer n√†o c√≤n ch·∫°y cho user n√†y
        // NEW: L∆∞u sessionCounter v√† totalMinutes tr∆∞·ªõc khi cleanup
        let preservedSessionCounter = 1;
        let preservedTotalMinutes = 0;
        let preservedCoin = 0;

        const existingData = channelSession.get(user.id);
        if (existingData) {
            // NEW: L∆∞u d·ªØ li·ªáu quan tr·ªçng tr∆∞·ªõc khi cleanup
            preservedSessionCounter = existingData.sessionCounter || 1;
            preservedTotalMinutes = existingData.totalMinutes || 0;
            preservedCoin = existingData.coin || 0;

            clearInterval(existingData.countdownTimer);
            clearInterval(existingData.timmer);
            if (existingData.countdownMessage) {
                await existingData.countdownMessage.delete().catch(console.error);
            }
            channelSession.delete(user.id);
            console.log(`üßπ Force cleanup for ${user.id} before processing voice update - preserved session: ${preservedSessionCounter}, total time: ${preservedTotalMinutes}m`);
        }

        // User join voice (standard) - exclude intermediate channel
        if (thisTime.channelId && thisTime.channelId !== '1357199605955039363' && (!lastTime.channelId || lastTime.channelId === '1357199605955039363')) {
            //l·∫•y ra channel user join hi·ªán t·∫°i
            let currentChannel = thisTime.channel

            // X√≥a interval ƒë·ªÉ cleanup tr√°nh g·ªçi infinite khi user out 
            // mu·ªën x√≥a interval th√¨ ph·∫£i c√≥ timmer, gi·ªØ n√≥ l·∫°i truy·ªÅn v√†o channelSession
            const timmer = countDown(user.id, prismaService) // Pass prisma instance

            let minutesLeft = 60;
            let countdownMessage = null
            let coin = 0;
            let sessionCounter = 1; // NEW: B·ªô ƒë·∫øm session b·∫Øt ƒë·∫ßu t·ª´ 1
            let totalMinutes = 0; // NEW: T·ªïng s·ªë ph√∫t ƒë√£ h·ªçc
            countdownMessage = await currentChannel.send(`<a:a_g_Cheer:1301431655503892531> Xinn ch√†o b·∫°n h·ªçc ${thisTime.member.displayName} T·ª´ b√¢y gi·ªù n·∫øu b·∫°n tham gia VC, m·ªói 1 ti·∫øng h·ªçc s·∫Ω quy ƒë·ªïi ra th√†nh m·ªôt 1Mƒê Coin Yay !`);
            const countdownTimer = setInterval(async () => {
                minutesLeft--;
                totalMinutes++; // NEW: TƒÉng t·ªïng s·ªë ph√∫t

                try {
                    // NEW: Ki·ªÉm tra kick user ·ªü 4h5p (245 ph√∫t)
                    if (totalMinutes >= 245) {
                        await currentChannel.send(`<:p_tinhtam:1385515547990687755>**B·∫°n ƒë√£ h·ªçc li√™n t·ª•c 4 ti·∫øng r·ªìi ƒë·∫•y !,** ${thisTime.member.displayName}  H√£y ngh·ªâ ng∆°i! v√† ra ngo√†i ch·∫°m c·ªè ƒëi nh√©`);
                        try {
                            await thisTime.member.voice.disconnect('ƒê√£ h·ªçc qu√° 4 gi·ªù - c·∫ßn ngh·ªâ ng∆°i!');
                            console.log(`‚ö†Ô∏è Kicked user ${user.tag} after 4h5m of study time`);
                        } catch (kickError) {
                            console.error(`‚ùå Failed to kick user ${user.id}:`, kickError);
                        }
                        return;
                    }

                    // NEW: Logic audio playback
                    if (sessionCounter === 30 && minutesLeft === 3) {
                        await playAudio(currentChannel, '30.mp3');
                        await countdownMessage.edit(`<:p_tinhtam:1385515547990687755> B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c 3 ti·∫øng 30p, ${thisTime.member.displayName} - c√≤n ${minutesLeft} ph√∫t n·ªØa ƒë·ªÉ gi·∫£i lao`);
                    } else if (sessionCounter === 4) {
                        await playAudio(currentChannel, '4.mp3');
                        await countdownMessage.edit(`<:p_tinhtam:1385515547990687755> Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh 4 ti·∫øng h·ªçc li√™n t·ª•c, ${thisTime.member.displayName} h√£y ngh·ªâ ngh∆°i v√† ra ngo√†i ch·∫°m c·ªè ƒëi nh√© !\n trong phi√™n h·ªçc n√†y b·∫°n ƒë√£ ki·∫øm ƒë∆∞·ª£c ${coin} MƒêCoin (Phi√™n #${sessionCounter}) - T·ªïng: ${Math.floor(totalMinutes / 60)}h${totalMinutes % 60}m`);
                    } else {
                        await countdownMessage.edit(`<a:a_g_Cheer:1301431655503892531> Xin ch√†o b·∫°n h·ªçc ${thisTime.member.displayName} T·ª´ b√¢y gi·ªù n·∫øu b·∫°n tham gia VC, m·ªói 1 ti·∫øng h·ªçc s·∫Ω quy ƒë·ªïi ra th√†nh m·ªôt 1Mƒê Coin Yay \n B·∫°n c√≤n ${minutesLeft} ph√∫t ƒë·ªÉ nh·∫≠n th∆∞·ªüng`);
                    }
                } catch (error) {
                    console.error(`‚ùå Failed to edit countdown message for ${user.id}:`, error.message);
                    // Kh√¥ng crash bot n·∫øu message edit fails
                }

                if (minutesLeft === 0) {
                    coin++;
                    sessionCounter++; // NEW: TƒÉng b·ªô ƒë·∫øm phi√™n
                    await currentChannel.send(`<a:a_b_gojotwerk:1288783436718411776> ${thisTime.member.displayName} +1 MƒêCoin! (Ho√†n th√†nh phi√™n #${sessionCounter - 1})`);
                    minutesLeft = 60; // Reset ƒë·ªÉ ƒë·∫øm ti·∫øp
                    console.log(`üìä User ${user.id} completed session #${sessionCounter - 1}, now on session #${sessionCounter}, total time: ${Math.floor(totalMinutes / 60)}h${totalMinutes % 60}m`);
                }
            }, 60 * 1000);

            channelSession.set(user.id, { currentChannel, timmer, balance, countdownTimer, countdownMessage, sessionCounter, totalMinutes, coin })
        }

        // User chuy·ªÉn t·ª´ voice channel n√†y sang voice channel kh√°c (kh√¥ng qua intermediate channel)
        if (lastTime.channelId && thisTime.channelId &&
            lastTime.channelId !== '1357199605955039363' &&
            thisTime.channelId !== '1357199605955039363' &&
            lastTime.channelId !== thisTime.channelId) {

            console.log(`User ${user.tag} switching from ${lastTime.channelId} to ${thisTime.channelId}`);

            // ‚úÖ Global cleanup ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán ·ªü ƒë·∫ßu function, kh√¥ng c·∫ßn cleanup ri√™ng n·ªØa
            // Note: Cleanup was already done at the start of this function to prevent multiple timers

            // Define currentChannel for the new channel user switched to
            let currentChannel = thisTime.channel;

            // X√≥a interval ƒë·ªÉ cleanup tr√°nh g·ªçi infinite khi user out 
            // mu·ªën x√≥a interval th√¨ ph·∫£i c√≥ timmer, gi·ªØ n√≥ l·∫°i truy·ªÅn v√†o channelSession
            const timmer = countDown(user.id, prismaService) // Pass prisma instance

            // Start new session in new channel
            let minutesLeft = 60;
            let countdownMessage = null
            let coin = 0;
            let sessionCounter = 1; // NEW: B·ªô ƒë·∫øm session b·∫Øt ƒë·∫ßu t·ª´ 1
            let totalMinutes = 0; // NEW: T·ªïng s·ªë ph√∫t ƒë√£ h·ªçc
            countdownMessage = await currentChannel.send(`<a:a_g_Cheer:1301431655503892531> Xinn ch√†o b·∫°n h·ªçc ${thisTime.member.displayName} T·ª´ b√¢y gi·ªù n·∫øu b·∫°n tham gia VC, m·ªói 1 ti·∫øng h·ªçc s·∫Ω quy ƒë·ªïi ra th√†nh m·ªôt 1Mƒê Coin Yay !`);
            const countdownTimer = setInterval(async () => {
                minutesLeft--;
                totalMinutes++; // NEW: TƒÉng t·ªïng s·ªë ph√∫t

                try {
                    // NEW: Ki·ªÉm tra kick user ·ªü 4h5p (245 ph√∫t)
                    if (totalMinutes >= 245) {
                        await currentChannel.send(`<:p_tinhtam:1385515547990687755>**B·∫°n ƒë√£ h·ªçc li√™n t·ª•c 4 ti·∫øng r·ªìi ƒë·∫•y !,** ${thisTime.member.displayName}  H√£y ngh·ªâ ng∆°i! v√† ra ngo√†i ch·∫°m c·ªè ƒëi nh√©`);
                        try {
                            await thisTime.member.voice.disconnect('ƒê√£ h·ªçc qu√° 4 gi·ªù - c·∫ßn ngh·ªâ ng∆°i!');
                            console.log(`‚ö†Ô∏è Kicked user ${user.tag} after 4h5m of study time`);
                        } catch (kickError) {
                            console.error(`‚ùå Failed to kick user ${user.id}:`, kickError);
                        }
                        return;
                    }

                    // NEW: Logic audio playback
                    if (sessionCounter === 30 && minutesLeft === 3) {
                        await playAudio(currentChannel, '30.mp3');
                        await countdownMessage.edit(`<:p_tinhtam:1385515547990687755> B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c 3 ti·∫øng 30p, ${thisTime.member.displayName} - c√≤n ${minutesLeft} ph√∫t n·ªØa ƒë·ªÉ gi·∫£i lao`);
                    } else if (sessionCounter === 4) {
                        await playAudio(currentChannel, '4.mp3');
                        await countdownMessage.edit(`<:p_tinhtam:1385515547990687755> Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh 4 ti·∫øng h·ªçc li√™n t·ª•c, ${thisTime.member.displayName} h√£y ngh·ªâ ngh∆°i v√† ra ngo√†i ch·∫°m c·ªè ƒëi nh√© !\n trong phi√™n h·ªçc n√†y b·∫°n ƒë√£ ki·∫øm ƒë∆∞·ª£c ${coin} MƒêCoin (Phi√™n #${sessionCounter}) - T·ªïng: ${Math.floor(totalMinutes / 60)}h${totalMinutes % 60}m`);
                    } else {
                        await countdownMessage.edit(`<a:a_g_Cheer:1301431655503892531> Xin ch√†o b·∫°n h·ªçc ${thisTime.member.displayName} T·ª´ b√¢y gi·ªù n·∫øu b·∫°n tham gia VC, m·ªói 1 ti·∫øng h·ªçc s·∫Ω quy ƒë·ªïi ra th√†nh m·ªôt 1Mƒê Coin Yay \n B·∫°n c√≤n ${minutesLeft} ph√∫t ƒë·ªÉ nh·∫≠n th∆∞·ªüng`);
                    }
                } catch (error) {
                    console.error(`‚ùå Failed to edit countdown message for ${user.id}:`, error.message);
                    // Kh√¥ng crash bot n·∫øu message edit fails
                }

                if (minutesLeft === 0) {
                    coin++;
                    sessionCounter++; // NEW: TƒÉng b·ªô ƒë·∫øm phi√™n
                    await currentChannel.send(`<a:a_b_gojotwerk:1288783436718411776> ${thisTime.member.displayName} +1 MƒêCoin!`);
                    minutesLeft = 60; // Reset ƒë·ªÉ ƒë·∫øm ti·∫øp
                    console.log(`üìä User ${user.id} completed session #${sessionCounter - 1}, now on session #${sessionCounter}, total time: ${Math.floor(totalMinutes / 60)}h${totalMinutes % 60}m`);
                }
            }, 60 * 1000);

            channelSession.set(user.id, { currentChannel, timmer, balance, countdownTimer, countdownMessage, sessionCounter, totalMinutes, coin });
        }

        // User r·ªùi voice
        if (lastTime.channelId && !thisTime.channelId) {
            // ‚úÖ Global cleanup ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán ·ªü ƒë·∫ßu function
            // Note: Cleanup was already done at the start of this function
            console.log(`Cleanup intervals for ${user.id}`);
        }

        // // X√°c ƒë·ªãnh user b·∫•m v√†o s·ª± ki·ªán t·∫°o ph√≤ng v·ªõi id ƒë∆∞·ª£c quy ∆∞·ªõc nh∆∞ d∆∞·ªõi 
        // if (lastTime.channel && lastTime.channel.id === '1357199605955039363') {
        //     let currentChannel = thisTime.channel
        //     let currentChannelVoice = thisTime.channel

        //     // Stop old session
        //     const oldSession = channelSession.get(user.id);
        //     if (oldSession) {
        //         clearInterval(oldSession.timmer);
        //     }

        //     // Start new session
        //     const timmer = countDown(user.id)

        //     currentChannelVoice.send(`${user.tag} chuy·ªÉn t·ª´ **${lastChannelVoice.name}** sang **${currentChannelVoice.name}** - ti·∫øp t·ª•c ki·∫øm MƒêCoin! üéØ`);
        //     channelSession.set(user.id, { currentChannel: currentChannelVoice, timmer, balance })
    })
})

// X·ª≠ l√Ω s·ª± ki·ªán slash command v√† autocomplete
client.on(Events.InteractionCreate, async interaction => {
    // X·ª≠ l√Ω autocomplete interactions
    if (interaction.isAutocomplete()) {
        const command = client.commands.get(interaction.commandName);

        if (!command) {
            console.error(`No command matching ${interaction.commandName} was found for autocomplete.`);
            return;
        }

        try {
            await command.execute(interaction);
        } catch (error) {
            console.error(`‚ùå Error executing autocomplete for ${interaction.commandName}:`, error);
        }
        return;
    }

    // Ch·ªâ x·ª≠ l√Ω l·ªánh chat input
    if (!interaction.isChatInputCommand()) return;

    // L·∫•y command t·ª´ collection
    const command = client.commands.get(interaction.commandName)

    // N·∫øu kh√¥ng t√¨m th·∫•y command, log l·ªói
    if (!command) {
        // c·∫ßn x·ª≠ yls ch·ªó n√†y 
        console.error(`No command matching ${interaction.commandName} was found.`);
        return;
    }

    try {
        // Th·ª±c thi l·ªánh
        await command.execute(interaction);
        console.log(`‚úÖ Command ${interaction.commandName} executed by ${interaction.user.username}`);
    } catch (error) {
        // N·∫øu l·ªói, log v√† tr·∫£ v·ªÅ th√¥ng b√°o l·ªói cho user
        console.error(`‚ùå Error executing command ${interaction.commandName}:`, error);

        const errorMessage = {
            content: 'C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán command n√†y!',
            flags: MessageFlags.Ephemeral
        };

        // N·∫øu ƒë√£ reply ho·∫∑c defer, edit l·∫°i reply
        if (interaction.replied || interaction.deferred) {
            await interaction.editReply(errorMessage);
        } else {
            await interaction.reply(errorMessage);
        }
    }
});

// ƒêƒÉng nh·∫≠p bot
client.login(process.env.DISCORD_TOKEN)